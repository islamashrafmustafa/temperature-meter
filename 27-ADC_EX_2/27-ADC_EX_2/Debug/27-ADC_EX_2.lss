
27-ADC_EX_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000804  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00000804  00000898  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080006e  0080006e  000008a6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008a6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000008d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000914  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011b8  00000000  00000000  00000a14  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000815  00000000  00000000  00001bcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000968  00000000  00000000  000023e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001ac  00000000  00000000  00002d4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ed  00000000  00000000  00002ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a48  00000000  00000000  000033e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00003e2d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e0       	ldi	r30, 0x04	; 4
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e6       	ldi	r26, 0x6E	; 110
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 37       	cpi	r26, 0x70	; 112
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 56 02 	call	0x4ac	; 0x4ac <main>
  8a:	0c 94 00 04 	jmp	0x800	; 0x800 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_vInit>:
#include <avr/io.h>
#include "std_macros.h"

void ADC_vInit(void)
{
	SET_BIT(ADMUX,REFS0);
  92:	87 b1       	in	r24, 0x07	; 7
  94:	80 64       	ori	r24, 0x40	; 64
  96:	87 b9       	out	0x07, r24	; 7
	SET_BIT(ADMUX,REFS1);
  98:	87 b1       	in	r24, 0x07	; 7
  9a:	80 68       	ori	r24, 0x80	; 128
  9c:	87 b9       	out	0x07, r24	; 7
	SET_BIT(ADCSRA,ADEN);
  9e:	86 b1       	in	r24, 0x06	; 6
  a0:	80 68       	ori	r24, 0x80	; 128
  a2:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA,ADPS1);
  a4:	86 b1       	in	r24, 0x06	; 6
  a6:	82 60       	ori	r24, 0x02	; 2
  a8:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA,ADPS2);
  aa:	86 b1       	in	r24, 0x06	; 6
  ac:	84 60       	ori	r24, 0x04	; 4
  ae:	86 b9       	out	0x06, r24	; 6
  b0:	08 95       	ret

000000b2 <ADC_u16read>:


unsigned short ADC_u16read(void)
{
	unsigned short read_val;
	SET_BIT(ADCSRA,ADSC);
  b2:	86 b1       	in	r24, 0x06	; 6
  b4:	80 64       	ori	r24, 0x40	; 64
  b6:	86 b9       	out	0x06, r24	; 6
	while (IS_BIT_CLR(ADCSRA,ADIF));
  b8:	34 9b       	sbis	0x06, 4	; 6
  ba:	fe cf       	rjmp	.-4      	; 0xb8 <ADC_u16read+0x6>
	SET_BIT(ADCSRA,ADIF);
  bc:	86 b1       	in	r24, 0x06	; 6
  be:	80 61       	ori	r24, 0x10	; 16
  c0:	86 b9       	out	0x06, r24	; 6
	read_val=ADCL;
  c2:	24 b1       	in	r18, 0x04	; 4
	read_val|=(ADCH<<8);
  c4:	85 b1       	in	r24, 0x05	; 5
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	98 2f       	mov	r25, r24
  ca:	88 27       	eor	r24, r24
	return read_val;
  cc:	82 2b       	or	r24, r18
  ce:	08 95       	ret

000000d0 <DIO_vsetPINDir>:
		case 'C':
		PORTC&=0xf0;
		PORTC|=value;
		case 'D':
		PORTD&=0xf0;
		PORTD|=value;
  d0:	82 34       	cpi	r24, 0x42	; 66
  d2:	19 f1       	breq	.+70     	; 0x11a <DIO_vsetPINDir+0x4a>
  d4:	18 f4       	brcc	.+6      	; 0xdc <DIO_vsetPINDir+0xc>
  d6:	81 34       	cpi	r24, 0x41	; 65
  d8:	39 f0       	breq	.+14     	; 0xe8 <DIO_vsetPINDir+0x18>
  da:	08 95       	ret
  dc:	83 34       	cpi	r24, 0x43	; 67
  de:	b1 f1       	breq	.+108    	; 0x14c <DIO_vsetPINDir+0x7c>
  e0:	84 34       	cpi	r24, 0x44	; 68
  e2:	09 f4       	brne	.+2      	; 0xe6 <DIO_vsetPINDir+0x16>
  e4:	4c c0       	rjmp	.+152    	; 0x17e <DIO_vsetPINDir+0xae>
  e6:	08 95       	ret
  e8:	41 30       	cpi	r20, 0x01	; 1
  ea:	59 f4       	brne	.+22     	; 0x102 <DIO_vsetPINDir+0x32>
  ec:	2a b3       	in	r18, 0x1a	; 26
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <DIO_vsetPINDir+0x28>
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	6a 95       	dec	r22
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <DIO_vsetPINDir+0x24>
  fc:	82 2b       	or	r24, r18
  fe:	8a bb       	out	0x1a, r24	; 26
 100:	08 95       	ret
 102:	2a b3       	in	r18, 0x1a	; 26
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	02 c0       	rjmp	.+4      	; 0x10e <DIO_vsetPINDir+0x3e>
 10a:	88 0f       	add	r24, r24
 10c:	99 1f       	adc	r25, r25
 10e:	6a 95       	dec	r22
 110:	e2 f7       	brpl	.-8      	; 0x10a <DIO_vsetPINDir+0x3a>
 112:	80 95       	com	r24
 114:	82 23       	and	r24, r18
 116:	8a bb       	out	0x1a, r24	; 26
 118:	08 95       	ret
 11a:	41 30       	cpi	r20, 0x01	; 1
 11c:	59 f4       	brne	.+22     	; 0x134 <DIO_vsetPINDir+0x64>
 11e:	27 b3       	in	r18, 0x17	; 23
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	02 c0       	rjmp	.+4      	; 0x12a <DIO_vsetPINDir+0x5a>
 126:	88 0f       	add	r24, r24
 128:	99 1f       	adc	r25, r25
 12a:	6a 95       	dec	r22
 12c:	e2 f7       	brpl	.-8      	; 0x126 <DIO_vsetPINDir+0x56>
 12e:	82 2b       	or	r24, r18
 130:	87 bb       	out	0x17, r24	; 23
 132:	08 95       	ret
 134:	27 b3       	in	r18, 0x17	; 23
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	02 c0       	rjmp	.+4      	; 0x140 <DIO_vsetPINDir+0x70>
 13c:	88 0f       	add	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	6a 95       	dec	r22
 142:	e2 f7       	brpl	.-8      	; 0x13c <DIO_vsetPINDir+0x6c>
 144:	80 95       	com	r24
 146:	82 23       	and	r24, r18
 148:	87 bb       	out	0x17, r24	; 23
 14a:	08 95       	ret
 14c:	41 30       	cpi	r20, 0x01	; 1
 14e:	59 f4       	brne	.+22     	; 0x166 <DIO_vsetPINDir+0x96>
 150:	24 b3       	in	r18, 0x14	; 20
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	02 c0       	rjmp	.+4      	; 0x15c <DIO_vsetPINDir+0x8c>
 158:	88 0f       	add	r24, r24
 15a:	99 1f       	adc	r25, r25
 15c:	6a 95       	dec	r22
 15e:	e2 f7       	brpl	.-8      	; 0x158 <DIO_vsetPINDir+0x88>
 160:	82 2b       	or	r24, r18
 162:	84 bb       	out	0x14, r24	; 20
 164:	08 95       	ret
 166:	24 b3       	in	r18, 0x14	; 20
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	02 c0       	rjmp	.+4      	; 0x172 <DIO_vsetPINDir+0xa2>
 16e:	88 0f       	add	r24, r24
 170:	99 1f       	adc	r25, r25
 172:	6a 95       	dec	r22
 174:	e2 f7       	brpl	.-8      	; 0x16e <DIO_vsetPINDir+0x9e>
 176:	80 95       	com	r24
 178:	82 23       	and	r24, r18
 17a:	84 bb       	out	0x14, r24	; 20
 17c:	08 95       	ret
 17e:	41 30       	cpi	r20, 0x01	; 1
 180:	59 f4       	brne	.+22     	; 0x198 <DIO_vsetPINDir+0xc8>
 182:	21 b3       	in	r18, 0x11	; 17
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	02 c0       	rjmp	.+4      	; 0x18e <DIO_vsetPINDir+0xbe>
 18a:	88 0f       	add	r24, r24
 18c:	99 1f       	adc	r25, r25
 18e:	6a 95       	dec	r22
 190:	e2 f7       	brpl	.-8      	; 0x18a <DIO_vsetPINDir+0xba>
 192:	82 2b       	or	r24, r18
 194:	81 bb       	out	0x11, r24	; 17
 196:	08 95       	ret
 198:	21 b3       	in	r18, 0x11	; 17
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <DIO_vsetPINDir+0xd4>
 1a0:	88 0f       	add	r24, r24
 1a2:	99 1f       	adc	r25, r25
 1a4:	6a 95       	dec	r22
 1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <DIO_vsetPINDir+0xd0>
 1a8:	80 95       	com	r24
 1aa:	82 23       	and	r24, r18
 1ac:	81 bb       	out	0x11, r24	; 17
 1ae:	08 95       	ret

000001b0 <DIO_write>:
 1b0:	82 34       	cpi	r24, 0x42	; 66
 1b2:	19 f1       	breq	.+70     	; 0x1fa <DIO_write+0x4a>
 1b4:	18 f4       	brcc	.+6      	; 0x1bc <DIO_write+0xc>
 1b6:	81 34       	cpi	r24, 0x41	; 65
 1b8:	39 f0       	breq	.+14     	; 0x1c8 <DIO_write+0x18>
 1ba:	08 95       	ret
 1bc:	83 34       	cpi	r24, 0x43	; 67
 1be:	b1 f1       	breq	.+108    	; 0x22c <DIO_write+0x7c>
 1c0:	84 34       	cpi	r24, 0x44	; 68
 1c2:	09 f4       	brne	.+2      	; 0x1c6 <DIO_write+0x16>
 1c4:	4c c0       	rjmp	.+152    	; 0x25e <DIO_write+0xae>
 1c6:	08 95       	ret
 1c8:	41 30       	cpi	r20, 0x01	; 1
 1ca:	59 f4       	brne	.+22     	; 0x1e2 <DIO_write+0x32>
 1cc:	2b b3       	in	r18, 0x1b	; 27
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <DIO_write+0x28>
 1d4:	88 0f       	add	r24, r24
 1d6:	99 1f       	adc	r25, r25
 1d8:	6a 95       	dec	r22
 1da:	e2 f7       	brpl	.-8      	; 0x1d4 <DIO_write+0x24>
 1dc:	82 2b       	or	r24, r18
 1de:	8b bb       	out	0x1b, r24	; 27
 1e0:	08 95       	ret
 1e2:	2b b3       	in	r18, 0x1b	; 27
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <DIO_write+0x3e>
 1ea:	88 0f       	add	r24, r24
 1ec:	99 1f       	adc	r25, r25
 1ee:	6a 95       	dec	r22
 1f0:	e2 f7       	brpl	.-8      	; 0x1ea <DIO_write+0x3a>
 1f2:	80 95       	com	r24
 1f4:	82 23       	and	r24, r18
 1f6:	8b bb       	out	0x1b, r24	; 27
 1f8:	08 95       	ret
 1fa:	41 30       	cpi	r20, 0x01	; 1
 1fc:	59 f4       	brne	.+22     	; 0x214 <DIO_write+0x64>
 1fe:	28 b3       	in	r18, 0x18	; 24
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	02 c0       	rjmp	.+4      	; 0x20a <DIO_write+0x5a>
 206:	88 0f       	add	r24, r24
 208:	99 1f       	adc	r25, r25
 20a:	6a 95       	dec	r22
 20c:	e2 f7       	brpl	.-8      	; 0x206 <DIO_write+0x56>
 20e:	82 2b       	or	r24, r18
 210:	88 bb       	out	0x18, r24	; 24
 212:	08 95       	ret
 214:	28 b3       	in	r18, 0x18	; 24
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	02 c0       	rjmp	.+4      	; 0x220 <DIO_write+0x70>
 21c:	88 0f       	add	r24, r24
 21e:	99 1f       	adc	r25, r25
 220:	6a 95       	dec	r22
 222:	e2 f7       	brpl	.-8      	; 0x21c <DIO_write+0x6c>
 224:	80 95       	com	r24
 226:	82 23       	and	r24, r18
 228:	88 bb       	out	0x18, r24	; 24
 22a:	08 95       	ret
 22c:	41 30       	cpi	r20, 0x01	; 1
 22e:	59 f4       	brne	.+22     	; 0x246 <DIO_write+0x96>
 230:	25 b3       	in	r18, 0x15	; 21
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	02 c0       	rjmp	.+4      	; 0x23c <DIO_write+0x8c>
 238:	88 0f       	add	r24, r24
 23a:	99 1f       	adc	r25, r25
 23c:	6a 95       	dec	r22
 23e:	e2 f7       	brpl	.-8      	; 0x238 <DIO_write+0x88>
 240:	82 2b       	or	r24, r18
 242:	85 bb       	out	0x15, r24	; 21
 244:	08 95       	ret
 246:	25 b3       	in	r18, 0x15	; 21
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	02 c0       	rjmp	.+4      	; 0x252 <DIO_write+0xa2>
 24e:	88 0f       	add	r24, r24
 250:	99 1f       	adc	r25, r25
 252:	6a 95       	dec	r22
 254:	e2 f7       	brpl	.-8      	; 0x24e <DIO_write+0x9e>
 256:	80 95       	com	r24
 258:	82 23       	and	r24, r18
 25a:	85 bb       	out	0x15, r24	; 21
 25c:	08 95       	ret
 25e:	41 30       	cpi	r20, 0x01	; 1
 260:	59 f4       	brne	.+22     	; 0x278 <DIO_write+0xc8>
 262:	22 b3       	in	r18, 0x12	; 18
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	02 c0       	rjmp	.+4      	; 0x26e <DIO_write+0xbe>
 26a:	88 0f       	add	r24, r24
 26c:	99 1f       	adc	r25, r25
 26e:	6a 95       	dec	r22
 270:	e2 f7       	brpl	.-8      	; 0x26a <DIO_write+0xba>
 272:	82 2b       	or	r24, r18
 274:	82 bb       	out	0x12, r24	; 18
 276:	08 95       	ret
 278:	22 b3       	in	r18, 0x12	; 18
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	02 c0       	rjmp	.+4      	; 0x284 <DIO_write+0xd4>
 280:	88 0f       	add	r24, r24
 282:	99 1f       	adc	r25, r25
 284:	6a 95       	dec	r22
 286:	e2 f7       	brpl	.-8      	; 0x280 <DIO_write+0xd0>
 288:	80 95       	com	r24
 28a:	82 23       	and	r24, r18
 28c:	82 bb       	out	0x12, r24	; 18
 28e:	08 95       	ret

00000290 <write_high_nibble>:
	}
}

void write_high_nibble(unsigned char portname,unsigned char value)
{
	value<<=4;
 290:	62 95       	swap	r22
 292:	60 7f       	andi	r22, 0xF0	; 240
	switch(portname)
 294:	82 34       	cpi	r24, 0x42	; 66
 296:	79 f0       	breq	.+30     	; 0x2b6 <write_high_nibble+0x26>
 298:	18 f4       	brcc	.+6      	; 0x2a0 <write_high_nibble+0x10>
 29a:	81 34       	cpi	r24, 0x41	; 65
 29c:	31 f0       	breq	.+12     	; 0x2aa <write_high_nibble+0x1a>
 29e:	08 95       	ret
 2a0:	83 34       	cpi	r24, 0x43	; 67
 2a2:	79 f0       	breq	.+30     	; 0x2c2 <write_high_nibble+0x32>
 2a4:	84 34       	cpi	r24, 0x44	; 68
 2a6:	99 f0       	breq	.+38     	; 0x2ce <write_high_nibble+0x3e>
 2a8:	08 95       	ret
	{
		case 'A':
		PORTA&=0x0f;
 2aa:	8b b3       	in	r24, 0x1b	; 27
 2ac:	8f 70       	andi	r24, 0x0F	; 15
 2ae:	8b bb       	out	0x1b, r24	; 27
		PORTA|=value;
 2b0:	8b b3       	in	r24, 0x1b	; 27
 2b2:	86 2b       	or	r24, r22
 2b4:	8b bb       	out	0x1b, r24	; 27
		case 'B':
		PORTB&=0x0f;
 2b6:	88 b3       	in	r24, 0x18	; 24
 2b8:	8f 70       	andi	r24, 0x0F	; 15
 2ba:	88 bb       	out	0x18, r24	; 24
		PORTB|=value;
 2bc:	88 b3       	in	r24, 0x18	; 24
 2be:	86 2b       	or	r24, r22
 2c0:	88 bb       	out	0x18, r24	; 24
		case 'C':
		PORTC&=0x0f;
 2c2:	85 b3       	in	r24, 0x15	; 21
 2c4:	8f 70       	andi	r24, 0x0F	; 15
 2c6:	85 bb       	out	0x15, r24	; 21
		PORTC|=value;
 2c8:	85 b3       	in	r24, 0x15	; 21
 2ca:	86 2b       	or	r24, r22
 2cc:	85 bb       	out	0x15, r24	; 21
		case 'D':
		PORTD&=0x0f;
 2ce:	82 b3       	in	r24, 0x12	; 18
 2d0:	8f 70       	andi	r24, 0x0F	; 15
 2d2:	82 bb       	out	0x12, r24	; 18
		PORTD|=value;
 2d4:	82 b3       	in	r24, 0x12	; 18
 2d6:	68 2b       	or	r22, r24
 2d8:	62 bb       	out	0x12, r22	; 18
 2da:	08 95       	ret

000002dc <send_falling_edge>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2dc:	41 e0       	ldi	r20, 0x01	; 1
 2de:	60 e0       	ldi	r22, 0x00	; 0
 2e0:	82 e4       	ldi	r24, 0x42	; 66
 2e2:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <DIO_write>
 2e6:	8f e9       	ldi	r24, 0x9F	; 159
 2e8:	9f e0       	ldi	r25, 0x0F	; 15
 2ea:	01 97       	sbiw	r24, 0x01	; 1
 2ec:	f1 f7       	brne	.-4      	; 0x2ea <send_falling_edge+0xe>
 2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <send_falling_edge+0x14>
 2f0:	00 00       	nop
 2f2:	40 e0       	ldi	r20, 0x00	; 0
 2f4:	60 e0       	ldi	r22, 0x00	; 0
 2f6:	82 e4       	ldi	r24, 0x42	; 66
 2f8:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <DIO_write>
 2fc:	8f e9       	ldi	r24, 0x9F	; 159
 2fe:	9f e0       	ldi	r25, 0x0F	; 15
 300:	01 97       	sbiw	r24, 0x01	; 1
 302:	f1 f7       	brne	.-4      	; 0x300 <send_falling_edge+0x24>
 304:	00 c0       	rjmp	.+0      	; 0x306 <send_falling_edge+0x2a>
 306:	00 00       	nop
 308:	08 95       	ret

0000030a <LCD_vSend_cmd>:
 30a:	cf 93       	push	r28
 30c:	c8 2f       	mov	r28, r24
 30e:	68 2f       	mov	r22, r24
 310:	62 95       	swap	r22
 312:	6f 70       	andi	r22, 0x0F	; 15
 314:	84 e4       	ldi	r24, 0x44	; 68
 316:	0e 94 48 01 	call	0x290	; 0x290 <write_high_nibble>
 31a:	40 e0       	ldi	r20, 0x00	; 0
 31c:	61 e0       	ldi	r22, 0x01	; 1
 31e:	82 e4       	ldi	r24, 0x42	; 66
 320:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <DIO_write>
 324:	0e 94 6e 01 	call	0x2dc	; 0x2dc <send_falling_edge>
 328:	6c 2f       	mov	r22, r28
 32a:	84 e4       	ldi	r24, 0x44	; 68
 32c:	0e 94 48 01 	call	0x290	; 0x290 <write_high_nibble>
 330:	40 e0       	ldi	r20, 0x00	; 0
 332:	61 e0       	ldi	r22, 0x01	; 1
 334:	82 e4       	ldi	r24, 0x42	; 66
 336:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <DIO_write>
 33a:	0e 94 6e 01 	call	0x2dc	; 0x2dc <send_falling_edge>
 33e:	8f ec       	ldi	r24, 0xCF	; 207
 340:	97 e0       	ldi	r25, 0x07	; 7
 342:	01 97       	sbiw	r24, 0x01	; 1
 344:	f1 f7       	brne	.-4      	; 0x342 <LCD_vSend_cmd+0x38>
 346:	00 c0       	rjmp	.+0      	; 0x348 <LCD_vSend_cmd+0x3e>
 348:	00 00       	nop
 34a:	cf 91       	pop	r28
 34c:	08 95       	ret

0000034e <LCD_vInit>:
 34e:	2f ef       	ldi	r18, 0xFF	; 255
 350:	81 ee       	ldi	r24, 0xE1	; 225
 352:	94 e0       	ldi	r25, 0x04	; 4
 354:	21 50       	subi	r18, 0x01	; 1
 356:	80 40       	sbci	r24, 0x00	; 0
 358:	90 40       	sbci	r25, 0x00	; 0
 35a:	e1 f7       	brne	.-8      	; 0x354 <LCD_vInit+0x6>
 35c:	00 c0       	rjmp	.+0      	; 0x35e <LCD_vInit+0x10>
 35e:	00 00       	nop
 360:	41 e0       	ldi	r20, 0x01	; 1
 362:	64 e0       	ldi	r22, 0x04	; 4
 364:	84 e4       	ldi	r24, 0x44	; 68
 366:	0e 94 68 00 	call	0xd0	; 0xd0 <DIO_vsetPINDir>
 36a:	41 e0       	ldi	r20, 0x01	; 1
 36c:	65 e0       	ldi	r22, 0x05	; 5
 36e:	84 e4       	ldi	r24, 0x44	; 68
 370:	0e 94 68 00 	call	0xd0	; 0xd0 <DIO_vsetPINDir>
 374:	41 e0       	ldi	r20, 0x01	; 1
 376:	66 e0       	ldi	r22, 0x06	; 6
 378:	84 e4       	ldi	r24, 0x44	; 68
 37a:	0e 94 68 00 	call	0xd0	; 0xd0 <DIO_vsetPINDir>
 37e:	41 e0       	ldi	r20, 0x01	; 1
 380:	67 e0       	ldi	r22, 0x07	; 7
 382:	84 e4       	ldi	r24, 0x44	; 68
 384:	0e 94 68 00 	call	0xd0	; 0xd0 <DIO_vsetPINDir>
 388:	41 e0       	ldi	r20, 0x01	; 1
 38a:	60 e0       	ldi	r22, 0x00	; 0
 38c:	82 e4       	ldi	r24, 0x42	; 66
 38e:	0e 94 68 00 	call	0xd0	; 0xd0 <DIO_vsetPINDir>
 392:	41 e0       	ldi	r20, 0x01	; 1
 394:	62 e0       	ldi	r22, 0x02	; 2
 396:	82 e4       	ldi	r24, 0x42	; 66
 398:	0e 94 68 00 	call	0xd0	; 0xd0 <DIO_vsetPINDir>
 39c:	41 e0       	ldi	r20, 0x01	; 1
 39e:	61 e0       	ldi	r22, 0x01	; 1
 3a0:	82 e4       	ldi	r24, 0x42	; 66
 3a2:	0e 94 68 00 	call	0xd0	; 0xd0 <DIO_vsetPINDir>
 3a6:	40 e0       	ldi	r20, 0x00	; 0
 3a8:	62 e0       	ldi	r22, 0x02	; 2
 3aa:	82 e4       	ldi	r24, 0x42	; 66
 3ac:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <DIO_write>
 3b0:	82 e0       	ldi	r24, 0x02	; 2
 3b2:	0e 94 85 01 	call	0x30a	; 0x30a <LCD_vSend_cmd>
 3b6:	8f e1       	ldi	r24, 0x1F	; 31
 3b8:	9e e4       	ldi	r25, 0x4E	; 78
 3ba:	01 97       	sbiw	r24, 0x01	; 1
 3bc:	f1 f7       	brne	.-4      	; 0x3ba <LCD_vInit+0x6c>
 3be:	00 c0       	rjmp	.+0      	; 0x3c0 <LCD_vInit+0x72>
 3c0:	00 00       	nop
 3c2:	88 e2       	ldi	r24, 0x28	; 40
 3c4:	0e 94 85 01 	call	0x30a	; 0x30a <LCD_vSend_cmd>
 3c8:	8f ec       	ldi	r24, 0xCF	; 207
 3ca:	97 e0       	ldi	r25, 0x07	; 7
 3cc:	01 97       	sbiw	r24, 0x01	; 1
 3ce:	f1 f7       	brne	.-4      	; 0x3cc <LCD_vInit+0x7e>
 3d0:	00 c0       	rjmp	.+0      	; 0x3d2 <LCD_vInit+0x84>
 3d2:	00 00       	nop
 3d4:	8c e0       	ldi	r24, 0x0C	; 12
 3d6:	0e 94 85 01 	call	0x30a	; 0x30a <LCD_vSend_cmd>
 3da:	8f ec       	ldi	r24, 0xCF	; 207
 3dc:	97 e0       	ldi	r25, 0x07	; 7
 3de:	01 97       	sbiw	r24, 0x01	; 1
 3e0:	f1 f7       	brne	.-4      	; 0x3de <LCD_vInit+0x90>
 3e2:	00 c0       	rjmp	.+0      	; 0x3e4 <LCD_vInit+0x96>
 3e4:	00 00       	nop
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	0e 94 85 01 	call	0x30a	; 0x30a <LCD_vSend_cmd>
 3ec:	8f e1       	ldi	r24, 0x1F	; 31
 3ee:	9e e4       	ldi	r25, 0x4E	; 78
 3f0:	01 97       	sbiw	r24, 0x01	; 1
 3f2:	f1 f7       	brne	.-4      	; 0x3f0 <LCD_vInit+0xa2>
 3f4:	00 c0       	rjmp	.+0      	; 0x3f6 <LCD_vInit+0xa8>
 3f6:	00 00       	nop
 3f8:	86 e0       	ldi	r24, 0x06	; 6
 3fa:	0e 94 85 01 	call	0x30a	; 0x30a <LCD_vSend_cmd>
 3fe:	8f ec       	ldi	r24, 0xCF	; 207
 400:	97 e0       	ldi	r25, 0x07	; 7
 402:	01 97       	sbiw	r24, 0x01	; 1
 404:	f1 f7       	brne	.-4      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 406:	00 c0       	rjmp	.+0      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 408:	00 00       	nop
 40a:	08 95       	ret

0000040c <LCD_vSend_char>:
 40c:	cf 93       	push	r28
 40e:	c8 2f       	mov	r28, r24
 410:	68 2f       	mov	r22, r24
 412:	62 95       	swap	r22
 414:	6f 70       	andi	r22, 0x0F	; 15
 416:	84 e4       	ldi	r24, 0x44	; 68
 418:	0e 94 48 01 	call	0x290	; 0x290 <write_high_nibble>
 41c:	41 e0       	ldi	r20, 0x01	; 1
 41e:	61 e0       	ldi	r22, 0x01	; 1
 420:	82 e4       	ldi	r24, 0x42	; 66
 422:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <DIO_write>
 426:	0e 94 6e 01 	call	0x2dc	; 0x2dc <send_falling_edge>
 42a:	6c 2f       	mov	r22, r28
 42c:	84 e4       	ldi	r24, 0x44	; 68
 42e:	0e 94 48 01 	call	0x290	; 0x290 <write_high_nibble>
 432:	41 e0       	ldi	r20, 0x01	; 1
 434:	61 e0       	ldi	r22, 0x01	; 1
 436:	82 e4       	ldi	r24, 0x42	; 66
 438:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <DIO_write>
 43c:	0e 94 6e 01 	call	0x2dc	; 0x2dc <send_falling_edge>
 440:	8f ec       	ldi	r24, 0xCF	; 207
 442:	97 e0       	ldi	r25, 0x07	; 7
 444:	01 97       	sbiw	r24, 0x01	; 1
 446:	f1 f7       	brne	.-4      	; 0x444 <LCD_vSend_char+0x38>
 448:	00 c0       	rjmp	.+0      	; 0x44a <LCD_vSend_char+0x3e>
 44a:	00 00       	nop
 44c:	cf 91       	pop	r28
 44e:	08 95       	ret

00000450 <LCD_vSend_string>:
 450:	cf 93       	push	r28
 452:	df 93       	push	r29
 454:	ec 01       	movw	r28, r24
 456:	03 c0       	rjmp	.+6      	; 0x45e <LCD_vSend_string+0xe>
 458:	0e 94 06 02 	call	0x40c	; 0x40c <LCD_vSend_char>
 45c:	21 96       	adiw	r28, 0x01	; 1
 45e:	88 81       	ld	r24, Y
 460:	81 11       	cpse	r24, r1
 462:	fa cf       	rjmp	.-12     	; 0x458 <LCD_vSend_string+0x8>
 464:	df 91       	pop	r29
 466:	cf 91       	pop	r28
 468:	08 95       	ret

0000046a <LCD_movecursor>:
	_delay_ms(10);
}
void LCD_movecursor(char row,char coloumn)
{
	char data ;
	if(row>2||row<1||coloumn>16||coloumn<1)
 46a:	9f ef       	ldi	r25, 0xFF	; 255
 46c:	98 0f       	add	r25, r24
 46e:	92 30       	cpi	r25, 0x02	; 2
 470:	70 f4       	brcc	.+28     	; 0x48e <LCD_movecursor+0x24>
 472:	61 31       	cpi	r22, 0x11	; 17
 474:	70 f4       	brcc	.+28     	; 0x492 <LCD_movecursor+0x28>
 476:	66 23       	and	r22, r22
 478:	71 f0       	breq	.+28     	; 0x496 <LCD_movecursor+0x2c>
	{
		data=0x80;
	}
	else if(row==1)
 47a:	81 30       	cpi	r24, 0x01	; 1
 47c:	19 f4       	brne	.+6      	; 0x484 <LCD_movecursor+0x1a>
	{
		data=0x80+coloumn-1 ;
 47e:	2f e7       	ldi	r18, 0x7F	; 127
 480:	26 0f       	add	r18, r22
 482:	0a c0       	rjmp	.+20     	; 0x498 <LCD_movecursor+0x2e>
	}
	else if (row==2)
 484:	82 30       	cpi	r24, 0x02	; 2
 486:	41 f4       	brne	.+16     	; 0x498 <LCD_movecursor+0x2e>
	{
		data=0xc0+coloumn-1;
 488:	2f eb       	ldi	r18, 0xBF	; 191
 48a:	26 0f       	add	r18, r22
 48c:	05 c0       	rjmp	.+10     	; 0x498 <LCD_movecursor+0x2e>
void LCD_movecursor(char row,char coloumn)
{
	char data ;
	if(row>2||row<1||coloumn>16||coloumn<1)
	{
		data=0x80;
 48e:	20 e8       	ldi	r18, 0x80	; 128
 490:	03 c0       	rjmp	.+6      	; 0x498 <LCD_movecursor+0x2e>
 492:	20 e8       	ldi	r18, 0x80	; 128
 494:	01 c0       	rjmp	.+2      	; 0x498 <LCD_movecursor+0x2e>
 496:	20 e8       	ldi	r18, 0x80	; 128
	}
	else if (row==2)
	{
		data=0xc0+coloumn-1;
	}
	LCD_vSend_cmd(data);
 498:	82 2f       	mov	r24, r18
 49a:	0e 94 85 01 	call	0x30a	; 0x30a <LCD_vSend_cmd>
 49e:	8f ec       	ldi	r24, 0xCF	; 207
 4a0:	97 e0       	ldi	r25, 0x07	; 7
 4a2:	01 97       	sbiw	r24, 0x01	; 1
 4a4:	f1 f7       	brne	.-4      	; 0x4a2 <LCD_movecursor+0x38>
 4a6:	00 c0       	rjmp	.+0      	; 0x4a8 <LCD_movecursor+0x3e>
 4a8:	00 00       	nop
 4aa:	08 95       	ret

000004ac <main>:
#include "ADC_driver.h"

unsigned short temperature;
int main(void)
{
   LCD_vInit();
 4ac:	0e 94 a7 01 	call	0x34e	; 0x34e <LCD_vInit>
   ADC_vInit();
 4b0:	0e 94 49 00 	call	0x92	; 0x92 <ADC_vInit>
   LCD_vSend_string("temperature=");
 4b4:	80 e6       	ldi	r24, 0x60	; 96
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	0e 94 28 02 	call	0x450	; 0x450 <LCD_vSend_string>
    while (1) 
    {
		temperature=(ADC_u16read()*(0.25));
 4bc:	0e 94 59 00 	call	0xb2	; 0xb2 <ADC_u16read>
 4c0:	bc 01       	movw	r22, r24
 4c2:	80 e0       	ldi	r24, 0x00	; 0
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	0e 94 f6 02 	call	0x5ec	; 0x5ec <__floatunsisf>
 4ca:	20 e0       	ldi	r18, 0x00	; 0
 4cc:	30 e0       	ldi	r19, 0x00	; 0
 4ce:	40 e8       	ldi	r20, 0x80	; 128
 4d0:	5e e3       	ldi	r21, 0x3E	; 62
 4d2:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <__mulsf3>
 4d6:	0e 94 c7 02 	call	0x58e	; 0x58e <__fixunssfsi>
 4da:	70 93 6f 00 	sts	0x006F, r23	; 0x80006f <__data_end+0x1>
 4de:	60 93 6e 00 	sts	0x006E, r22	; 0x80006e <__data_end>
		if (temperature<10)
 4e2:	6a 30       	cpi	r22, 0x0A	; 10
 4e4:	71 05       	cpc	r23, r1
 4e6:	98 f4       	brcc	.+38     	; 0x50e <main+0x62>
		{
			 LCD_movecursor(1,13);
 4e8:	6d e0       	ldi	r22, 0x0D	; 13
 4ea:	81 e0       	ldi	r24, 0x01	; 1
 4ec:	0e 94 35 02 	call	0x46a	; 0x46a <LCD_movecursor>
			 LCD_vSend_char(0x30);
 4f0:	80 e3       	ldi	r24, 0x30	; 48
 4f2:	0e 94 06 02 	call	0x40c	; 0x40c <LCD_vSend_char>
			 LCD_vSend_char((temperature)+48);
 4f6:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__data_end>
 4fa:	80 5d       	subi	r24, 0xD0	; 208
 4fc:	0e 94 06 02 	call	0x40c	; 0x40c <LCD_vSend_char>
			 LCD_vSend_char(0xDF);
 500:	8f ed       	ldi	r24, 0xDF	; 223
 502:	0e 94 06 02 	call	0x40c	; 0x40c <LCD_vSend_char>
			 LCD_vSend_char(0x43);
 506:	83 e4       	ldi	r24, 0x43	; 67
 508:	0e 94 06 02 	call	0x40c	; 0x40c <LCD_vSend_char>
 50c:	d7 cf       	rjmp	.-82     	; 0x4bc <main+0x10>
			 
		}
		else if (temperature<100)
 50e:	64 36       	cpi	r22, 0x64	; 100
 510:	71 05       	cpc	r23, r1
 512:	a0 f6       	brcc	.-88     	; 0x4bc <main+0x10>
		{
			 LCD_movecursor(1,13);
 514:	6d e0       	ldi	r22, 0x0D	; 13
 516:	81 e0       	ldi	r24, 0x01	; 1
 518:	0e 94 35 02 	call	0x46a	; 0x46a <LCD_movecursor>
			 LCD_vSend_char((temperature/10)+48);
 51c:	20 91 6e 00 	lds	r18, 0x006E	; 0x80006e <__data_end>
 520:	30 91 6f 00 	lds	r19, 0x006F	; 0x80006f <__data_end+0x1>
 524:	ad ec       	ldi	r26, 0xCD	; 205
 526:	bc ec       	ldi	r27, 0xCC	; 204
 528:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <__umulhisi3>
 52c:	96 95       	lsr	r25
 52e:	87 95       	ror	r24
 530:	96 95       	lsr	r25
 532:	87 95       	ror	r24
 534:	96 95       	lsr	r25
 536:	87 95       	ror	r24
 538:	80 5d       	subi	r24, 0xD0	; 208
 53a:	0e 94 06 02 	call	0x40c	; 0x40c <LCD_vSend_char>
			 LCD_vSend_char((temperature%10)+48);
 53e:	40 91 6e 00 	lds	r20, 0x006E	; 0x80006e <__data_end>
 542:	50 91 6f 00 	lds	r21, 0x006F	; 0x80006f <__data_end+0x1>
 546:	9a 01       	movw	r18, r20
 548:	ad ec       	ldi	r26, 0xCD	; 205
 54a:	bc ec       	ldi	r27, 0xCC	; 204
 54c:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <__umulhisi3>
 550:	96 95       	lsr	r25
 552:	87 95       	ror	r24
 554:	96 95       	lsr	r25
 556:	87 95       	ror	r24
 558:	96 95       	lsr	r25
 55a:	87 95       	ror	r24
 55c:	9c 01       	movw	r18, r24
 55e:	22 0f       	add	r18, r18
 560:	33 1f       	adc	r19, r19
 562:	88 0f       	add	r24, r24
 564:	99 1f       	adc	r25, r25
 566:	88 0f       	add	r24, r24
 568:	99 1f       	adc	r25, r25
 56a:	88 0f       	add	r24, r24
 56c:	99 1f       	adc	r25, r25
 56e:	82 0f       	add	r24, r18
 570:	93 1f       	adc	r25, r19
 572:	9a 01       	movw	r18, r20
 574:	28 1b       	sub	r18, r24
 576:	39 0b       	sbc	r19, r25
 578:	c9 01       	movw	r24, r18
 57a:	80 5d       	subi	r24, 0xD0	; 208
 57c:	0e 94 06 02 	call	0x40c	; 0x40c <LCD_vSend_char>
			 LCD_vSend_char(0xDF);
 580:	8f ed       	ldi	r24, 0xDF	; 223
 582:	0e 94 06 02 	call	0x40c	; 0x40c <LCD_vSend_char>
			 LCD_vSend_char(0x43);
 586:	83 e4       	ldi	r24, 0x43	; 67
 588:	0e 94 06 02 	call	0x40c	; 0x40c <LCD_vSend_char>
 58c:	97 cf       	rjmp	.-210    	; 0x4bc <main+0x10>

0000058e <__fixunssfsi>:
 58e:	0e 94 3b 03 	call	0x676	; 0x676 <__fp_splitA>
 592:	88 f0       	brcs	.+34     	; 0x5b6 <__fixunssfsi+0x28>
 594:	9f 57       	subi	r25, 0x7F	; 127
 596:	98 f0       	brcs	.+38     	; 0x5be <__fixunssfsi+0x30>
 598:	b9 2f       	mov	r27, r25
 59a:	99 27       	eor	r25, r25
 59c:	b7 51       	subi	r27, 0x17	; 23
 59e:	b0 f0       	brcs	.+44     	; 0x5cc <__fixunssfsi+0x3e>
 5a0:	e1 f0       	breq	.+56     	; 0x5da <__fixunssfsi+0x4c>
 5a2:	66 0f       	add	r22, r22
 5a4:	77 1f       	adc	r23, r23
 5a6:	88 1f       	adc	r24, r24
 5a8:	99 1f       	adc	r25, r25
 5aa:	1a f0       	brmi	.+6      	; 0x5b2 <__fixunssfsi+0x24>
 5ac:	ba 95       	dec	r27
 5ae:	c9 f7       	brne	.-14     	; 0x5a2 <__fixunssfsi+0x14>
 5b0:	14 c0       	rjmp	.+40     	; 0x5da <__fixunssfsi+0x4c>
 5b2:	b1 30       	cpi	r27, 0x01	; 1
 5b4:	91 f0       	breq	.+36     	; 0x5da <__fixunssfsi+0x4c>
 5b6:	0e 94 55 03 	call	0x6aa	; 0x6aa <__fp_zero>
 5ba:	b1 e0       	ldi	r27, 0x01	; 1
 5bc:	08 95       	ret
 5be:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__fp_zero>
 5c2:	67 2f       	mov	r22, r23
 5c4:	78 2f       	mov	r23, r24
 5c6:	88 27       	eor	r24, r24
 5c8:	b8 5f       	subi	r27, 0xF8	; 248
 5ca:	39 f0       	breq	.+14     	; 0x5da <__fixunssfsi+0x4c>
 5cc:	b9 3f       	cpi	r27, 0xF9	; 249
 5ce:	cc f3       	brlt	.-14     	; 0x5c2 <__fixunssfsi+0x34>
 5d0:	86 95       	lsr	r24
 5d2:	77 95       	ror	r23
 5d4:	67 95       	ror	r22
 5d6:	b3 95       	inc	r27
 5d8:	d9 f7       	brne	.-10     	; 0x5d0 <__fixunssfsi+0x42>
 5da:	3e f4       	brtc	.+14     	; 0x5ea <__fixunssfsi+0x5c>
 5dc:	90 95       	com	r25
 5de:	80 95       	com	r24
 5e0:	70 95       	com	r23
 5e2:	61 95       	neg	r22
 5e4:	7f 4f       	sbci	r23, 0xFF	; 255
 5e6:	8f 4f       	sbci	r24, 0xFF	; 255
 5e8:	9f 4f       	sbci	r25, 0xFF	; 255
 5ea:	08 95       	ret

000005ec <__floatunsisf>:
 5ec:	e8 94       	clt
 5ee:	09 c0       	rjmp	.+18     	; 0x602 <__floatsisf+0x12>

000005f0 <__floatsisf>:
 5f0:	97 fb       	bst	r25, 7
 5f2:	3e f4       	brtc	.+14     	; 0x602 <__floatsisf+0x12>
 5f4:	90 95       	com	r25
 5f6:	80 95       	com	r24
 5f8:	70 95       	com	r23
 5fa:	61 95       	neg	r22
 5fc:	7f 4f       	sbci	r23, 0xFF	; 255
 5fe:	8f 4f       	sbci	r24, 0xFF	; 255
 600:	9f 4f       	sbci	r25, 0xFF	; 255
 602:	99 23       	and	r25, r25
 604:	a9 f0       	breq	.+42     	; 0x630 <__floatsisf+0x40>
 606:	f9 2f       	mov	r31, r25
 608:	96 e9       	ldi	r25, 0x96	; 150
 60a:	bb 27       	eor	r27, r27
 60c:	93 95       	inc	r25
 60e:	f6 95       	lsr	r31
 610:	87 95       	ror	r24
 612:	77 95       	ror	r23
 614:	67 95       	ror	r22
 616:	b7 95       	ror	r27
 618:	f1 11       	cpse	r31, r1
 61a:	f8 cf       	rjmp	.-16     	; 0x60c <__floatsisf+0x1c>
 61c:	fa f4       	brpl	.+62     	; 0x65c <__floatsisf+0x6c>
 61e:	bb 0f       	add	r27, r27
 620:	11 f4       	brne	.+4      	; 0x626 <__floatsisf+0x36>
 622:	60 ff       	sbrs	r22, 0
 624:	1b c0       	rjmp	.+54     	; 0x65c <__floatsisf+0x6c>
 626:	6f 5f       	subi	r22, 0xFF	; 255
 628:	7f 4f       	sbci	r23, 0xFF	; 255
 62a:	8f 4f       	sbci	r24, 0xFF	; 255
 62c:	9f 4f       	sbci	r25, 0xFF	; 255
 62e:	16 c0       	rjmp	.+44     	; 0x65c <__floatsisf+0x6c>
 630:	88 23       	and	r24, r24
 632:	11 f0       	breq	.+4      	; 0x638 <__floatsisf+0x48>
 634:	96 e9       	ldi	r25, 0x96	; 150
 636:	11 c0       	rjmp	.+34     	; 0x65a <__floatsisf+0x6a>
 638:	77 23       	and	r23, r23
 63a:	21 f0       	breq	.+8      	; 0x644 <__floatsisf+0x54>
 63c:	9e e8       	ldi	r25, 0x8E	; 142
 63e:	87 2f       	mov	r24, r23
 640:	76 2f       	mov	r23, r22
 642:	05 c0       	rjmp	.+10     	; 0x64e <__floatsisf+0x5e>
 644:	66 23       	and	r22, r22
 646:	71 f0       	breq	.+28     	; 0x664 <__floatsisf+0x74>
 648:	96 e8       	ldi	r25, 0x86	; 134
 64a:	86 2f       	mov	r24, r22
 64c:	70 e0       	ldi	r23, 0x00	; 0
 64e:	60 e0       	ldi	r22, 0x00	; 0
 650:	2a f0       	brmi	.+10     	; 0x65c <__floatsisf+0x6c>
 652:	9a 95       	dec	r25
 654:	66 0f       	add	r22, r22
 656:	77 1f       	adc	r23, r23
 658:	88 1f       	adc	r24, r24
 65a:	da f7       	brpl	.-10     	; 0x652 <__floatsisf+0x62>
 65c:	88 0f       	add	r24, r24
 65e:	96 95       	lsr	r25
 660:	87 95       	ror	r24
 662:	97 f9       	bld	r25, 7
 664:	08 95       	ret

00000666 <__fp_split3>:
 666:	57 fd       	sbrc	r21, 7
 668:	90 58       	subi	r25, 0x80	; 128
 66a:	44 0f       	add	r20, r20
 66c:	55 1f       	adc	r21, r21
 66e:	59 f0       	breq	.+22     	; 0x686 <__fp_splitA+0x10>
 670:	5f 3f       	cpi	r21, 0xFF	; 255
 672:	71 f0       	breq	.+28     	; 0x690 <__fp_splitA+0x1a>
 674:	47 95       	ror	r20

00000676 <__fp_splitA>:
 676:	88 0f       	add	r24, r24
 678:	97 fb       	bst	r25, 7
 67a:	99 1f       	adc	r25, r25
 67c:	61 f0       	breq	.+24     	; 0x696 <__fp_splitA+0x20>
 67e:	9f 3f       	cpi	r25, 0xFF	; 255
 680:	79 f0       	breq	.+30     	; 0x6a0 <__fp_splitA+0x2a>
 682:	87 95       	ror	r24
 684:	08 95       	ret
 686:	12 16       	cp	r1, r18
 688:	13 06       	cpc	r1, r19
 68a:	14 06       	cpc	r1, r20
 68c:	55 1f       	adc	r21, r21
 68e:	f2 cf       	rjmp	.-28     	; 0x674 <__fp_split3+0xe>
 690:	46 95       	lsr	r20
 692:	f1 df       	rcall	.-30     	; 0x676 <__fp_splitA>
 694:	08 c0       	rjmp	.+16     	; 0x6a6 <__fp_splitA+0x30>
 696:	16 16       	cp	r1, r22
 698:	17 06       	cpc	r1, r23
 69a:	18 06       	cpc	r1, r24
 69c:	99 1f       	adc	r25, r25
 69e:	f1 cf       	rjmp	.-30     	; 0x682 <__fp_splitA+0xc>
 6a0:	86 95       	lsr	r24
 6a2:	71 05       	cpc	r23, r1
 6a4:	61 05       	cpc	r22, r1
 6a6:	08 94       	sec
 6a8:	08 95       	ret

000006aa <__fp_zero>:
 6aa:	e8 94       	clt

000006ac <__fp_szero>:
 6ac:	bb 27       	eor	r27, r27
 6ae:	66 27       	eor	r22, r22
 6b0:	77 27       	eor	r23, r23
 6b2:	cb 01       	movw	r24, r22
 6b4:	97 f9       	bld	r25, 7
 6b6:	08 95       	ret

000006b8 <__mulsf3>:
 6b8:	0e 94 6f 03 	call	0x6de	; 0x6de <__mulsf3x>
 6bc:	0c 94 e0 03 	jmp	0x7c0	; 0x7c0 <__fp_round>
 6c0:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <__fp_pscA>
 6c4:	38 f0       	brcs	.+14     	; 0x6d4 <__mulsf3+0x1c>
 6c6:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__fp_pscB>
 6ca:	20 f0       	brcs	.+8      	; 0x6d4 <__mulsf3+0x1c>
 6cc:	95 23       	and	r25, r21
 6ce:	11 f0       	breq	.+4      	; 0x6d4 <__mulsf3+0x1c>
 6d0:	0c 94 c9 03 	jmp	0x792	; 0x792 <__fp_inf>
 6d4:	0c 94 cf 03 	jmp	0x79e	; 0x79e <__fp_nan>
 6d8:	11 24       	eor	r1, r1
 6da:	0c 94 56 03 	jmp	0x6ac	; 0x6ac <__fp_szero>

000006de <__mulsf3x>:
 6de:	0e 94 33 03 	call	0x666	; 0x666 <__fp_split3>
 6e2:	70 f3       	brcs	.-36     	; 0x6c0 <__mulsf3+0x8>

000006e4 <__mulsf3_pse>:
 6e4:	95 9f       	mul	r25, r21
 6e6:	c1 f3       	breq	.-16     	; 0x6d8 <__mulsf3+0x20>
 6e8:	95 0f       	add	r25, r21
 6ea:	50 e0       	ldi	r21, 0x00	; 0
 6ec:	55 1f       	adc	r21, r21
 6ee:	62 9f       	mul	r22, r18
 6f0:	f0 01       	movw	r30, r0
 6f2:	72 9f       	mul	r23, r18
 6f4:	bb 27       	eor	r27, r27
 6f6:	f0 0d       	add	r31, r0
 6f8:	b1 1d       	adc	r27, r1
 6fa:	63 9f       	mul	r22, r19
 6fc:	aa 27       	eor	r26, r26
 6fe:	f0 0d       	add	r31, r0
 700:	b1 1d       	adc	r27, r1
 702:	aa 1f       	adc	r26, r26
 704:	64 9f       	mul	r22, r20
 706:	66 27       	eor	r22, r22
 708:	b0 0d       	add	r27, r0
 70a:	a1 1d       	adc	r26, r1
 70c:	66 1f       	adc	r22, r22
 70e:	82 9f       	mul	r24, r18
 710:	22 27       	eor	r18, r18
 712:	b0 0d       	add	r27, r0
 714:	a1 1d       	adc	r26, r1
 716:	62 1f       	adc	r22, r18
 718:	73 9f       	mul	r23, r19
 71a:	b0 0d       	add	r27, r0
 71c:	a1 1d       	adc	r26, r1
 71e:	62 1f       	adc	r22, r18
 720:	83 9f       	mul	r24, r19
 722:	a0 0d       	add	r26, r0
 724:	61 1d       	adc	r22, r1
 726:	22 1f       	adc	r18, r18
 728:	74 9f       	mul	r23, r20
 72a:	33 27       	eor	r19, r19
 72c:	a0 0d       	add	r26, r0
 72e:	61 1d       	adc	r22, r1
 730:	23 1f       	adc	r18, r19
 732:	84 9f       	mul	r24, r20
 734:	60 0d       	add	r22, r0
 736:	21 1d       	adc	r18, r1
 738:	82 2f       	mov	r24, r18
 73a:	76 2f       	mov	r23, r22
 73c:	6a 2f       	mov	r22, r26
 73e:	11 24       	eor	r1, r1
 740:	9f 57       	subi	r25, 0x7F	; 127
 742:	50 40       	sbci	r21, 0x00	; 0
 744:	9a f0       	brmi	.+38     	; 0x76c <__mulsf3_pse+0x88>
 746:	f1 f0       	breq	.+60     	; 0x784 <__mulsf3_pse+0xa0>
 748:	88 23       	and	r24, r24
 74a:	4a f0       	brmi	.+18     	; 0x75e <__mulsf3_pse+0x7a>
 74c:	ee 0f       	add	r30, r30
 74e:	ff 1f       	adc	r31, r31
 750:	bb 1f       	adc	r27, r27
 752:	66 1f       	adc	r22, r22
 754:	77 1f       	adc	r23, r23
 756:	88 1f       	adc	r24, r24
 758:	91 50       	subi	r25, 0x01	; 1
 75a:	50 40       	sbci	r21, 0x00	; 0
 75c:	a9 f7       	brne	.-22     	; 0x748 <__mulsf3_pse+0x64>
 75e:	9e 3f       	cpi	r25, 0xFE	; 254
 760:	51 05       	cpc	r21, r1
 762:	80 f0       	brcs	.+32     	; 0x784 <__mulsf3_pse+0xa0>
 764:	0c 94 c9 03 	jmp	0x792	; 0x792 <__fp_inf>
 768:	0c 94 56 03 	jmp	0x6ac	; 0x6ac <__fp_szero>
 76c:	5f 3f       	cpi	r21, 0xFF	; 255
 76e:	e4 f3       	brlt	.-8      	; 0x768 <__mulsf3_pse+0x84>
 770:	98 3e       	cpi	r25, 0xE8	; 232
 772:	d4 f3       	brlt	.-12     	; 0x768 <__mulsf3_pse+0x84>
 774:	86 95       	lsr	r24
 776:	77 95       	ror	r23
 778:	67 95       	ror	r22
 77a:	b7 95       	ror	r27
 77c:	f7 95       	ror	r31
 77e:	e7 95       	ror	r30
 780:	9f 5f       	subi	r25, 0xFF	; 255
 782:	c1 f7       	brne	.-16     	; 0x774 <__mulsf3_pse+0x90>
 784:	fe 2b       	or	r31, r30
 786:	88 0f       	add	r24, r24
 788:	91 1d       	adc	r25, r1
 78a:	96 95       	lsr	r25
 78c:	87 95       	ror	r24
 78e:	97 f9       	bld	r25, 7
 790:	08 95       	ret

00000792 <__fp_inf>:
 792:	97 f9       	bld	r25, 7
 794:	9f 67       	ori	r25, 0x7F	; 127
 796:	80 e8       	ldi	r24, 0x80	; 128
 798:	70 e0       	ldi	r23, 0x00	; 0
 79a:	60 e0       	ldi	r22, 0x00	; 0
 79c:	08 95       	ret

0000079e <__fp_nan>:
 79e:	9f ef       	ldi	r25, 0xFF	; 255
 7a0:	80 ec       	ldi	r24, 0xC0	; 192
 7a2:	08 95       	ret

000007a4 <__fp_pscA>:
 7a4:	00 24       	eor	r0, r0
 7a6:	0a 94       	dec	r0
 7a8:	16 16       	cp	r1, r22
 7aa:	17 06       	cpc	r1, r23
 7ac:	18 06       	cpc	r1, r24
 7ae:	09 06       	cpc	r0, r25
 7b0:	08 95       	ret

000007b2 <__fp_pscB>:
 7b2:	00 24       	eor	r0, r0
 7b4:	0a 94       	dec	r0
 7b6:	12 16       	cp	r1, r18
 7b8:	13 06       	cpc	r1, r19
 7ba:	14 06       	cpc	r1, r20
 7bc:	05 06       	cpc	r0, r21
 7be:	08 95       	ret

000007c0 <__fp_round>:
 7c0:	09 2e       	mov	r0, r25
 7c2:	03 94       	inc	r0
 7c4:	00 0c       	add	r0, r0
 7c6:	11 f4       	brne	.+4      	; 0x7cc <__fp_round+0xc>
 7c8:	88 23       	and	r24, r24
 7ca:	52 f0       	brmi	.+20     	; 0x7e0 <__fp_round+0x20>
 7cc:	bb 0f       	add	r27, r27
 7ce:	40 f4       	brcc	.+16     	; 0x7e0 <__fp_round+0x20>
 7d0:	bf 2b       	or	r27, r31
 7d2:	11 f4       	brne	.+4      	; 0x7d8 <__fp_round+0x18>
 7d4:	60 ff       	sbrs	r22, 0
 7d6:	04 c0       	rjmp	.+8      	; 0x7e0 <__fp_round+0x20>
 7d8:	6f 5f       	subi	r22, 0xFF	; 255
 7da:	7f 4f       	sbci	r23, 0xFF	; 255
 7dc:	8f 4f       	sbci	r24, 0xFF	; 255
 7de:	9f 4f       	sbci	r25, 0xFF	; 255
 7e0:	08 95       	ret

000007e2 <__umulhisi3>:
 7e2:	a2 9f       	mul	r26, r18
 7e4:	b0 01       	movw	r22, r0
 7e6:	b3 9f       	mul	r27, r19
 7e8:	c0 01       	movw	r24, r0
 7ea:	a3 9f       	mul	r26, r19
 7ec:	70 0d       	add	r23, r0
 7ee:	81 1d       	adc	r24, r1
 7f0:	11 24       	eor	r1, r1
 7f2:	91 1d       	adc	r25, r1
 7f4:	b2 9f       	mul	r27, r18
 7f6:	70 0d       	add	r23, r0
 7f8:	81 1d       	adc	r24, r1
 7fa:	11 24       	eor	r1, r1
 7fc:	91 1d       	adc	r25, r1
 7fe:	08 95       	ret

00000800 <_exit>:
 800:	f8 94       	cli

00000802 <__stop_program>:
 802:	ff cf       	rjmp	.-2      	; 0x802 <__stop_program>
